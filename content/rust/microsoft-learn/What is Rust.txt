What is Rust
Learning Objectives
# Some of the unique features of Rust

You can manage low-level details with Rust but you can also take advantage of high-level concepts like iteration and interfaces which sets Rust apart from other low-level languages like C and C++.

Rust has a module system that manages its code you write. Crates are the smallest piece of code that the compiler can run. Modules help organize and manage the scope of your code. Similar code items can be grouped within modules. Finally, paths are named items in Rust code. Paths can be functions or modules. They also determine privacy statuses like public or private access to hide custom implementation details in your code.

# Why developers choose Rust over other programming languages

Rust has a vast ecosystem of libraries and tools that make tedious things in other languages easy and quick in Rust. It also does abstraction really well and allows for control over performance and resource consumption while maintaining memory safety.

# The basic components and tools to build, compile, and run Rust programs

Rust's standard library, std, holds the libraries for its core functionality, such as collections like HashMap, env for environment, and fs for code to work with the filesystem. There's lots of other crates/libraries like chrono and regex.

Rust has a build tool and dependency manager called Cargo. It has lots of commands that make Rust easy to work with, such as `cargo new` that makes project templates and `cargo doc` that builds documentation.

# How to use the Rust playground

https://play.rust-lang.org/, you have access to some of the build tools like run, build, and test. Features also include a linter, a test runner, a way to share your code and save it. You're able to alter the settings to look like VS Code and change the editor's theme.