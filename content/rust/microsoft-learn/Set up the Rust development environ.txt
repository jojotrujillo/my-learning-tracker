Set up the Rust development environment
Learning Objectives
# Set up your development environment for using Rust.

If using Windows, three major parts to setup: downloading and installing VS Code, installing C++ build tools for VS Code, and Rust's language files
Rust source code files have the `.rs` file extension. You'll need to use either rustc (Rust's compiler) or Cargo to compile the files into an executable program

VS Code well-suited for unique challenge of writing code versus regular text editors like Notepad or word processing software like MS Word. It's also free and full of features: https://code.visualstudio.com/download

Developing Rust locally also requires Microsoft's Visual C++ build tools but I'm opting to use Dev Containers instead

Rust has a tool called `rustup` (https://rustup.rs/) that is the recommened way to install Rust. You could always run `rustup update` to update it and verify your installation by running `rustc`. Rust has a six week release cycle as well.

# Write a simple "Hello, world!" program.

An example of a simple manually generated source code file and binary of a Rust program is in the hello-world directory.

# Use Cargo, Rust's build tool and dependency manager.

The "boilerplate" way of writing Rust is to use the `cargo new <project-name>` command and this will generate a boilerplate Rust project for you. It includes a Cargo.toml file which stores the metadata and dependency info for your new Rust project. Running the `cargo run` command automatically compiles and generate an executable binary of your source code files for you.